error_log stderr notice;

events {
  worker_connections 1024;
}

http {
  access_log /dev/stdout;
  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;
  keepalive_timeout 65;
  types_hash_max_size 2048;

  include mime.types;
  default_type application/octet-stream;

  gzip on;

  upstream api {
    server api:8080;
  }

  upstream keycloak {
    server keycloak:8080;
  }

  server {
    listen 80;

    root /usr/share/nginx/html;

    # Session settings
    set $session_name              session;
    set $session_secret            45aXCTZ6gfu8wJt2iQ9mpiaU2tCXNENb;
    set $session_storage           cookie;
    set $session_hmac              sha1;

    # I disabled caching so the browser won't cache the site.
    expires           0;
    add_header        Cache-Control private;

    location / {
      access_by_lua '
        local host = ngx.req.get_headers()["Host"]
        local realm = "acme"
        
        local opts = {
          redirect_uri = string.format("http://%s/login", host),
          accept_none_alg = true,
          discovery = string.format("http://%s/auth/realms/%s/.well-known/openid-configuration", host, realm),
          client_id = "acme",
          client_secret = "3a6e227c-dd20-4ce5-8be7-abe6dab831ca",
          redirect_uri_scheme = "http",
          logout_path = "/logout",
          redirect_after_logout_uri = string.format("http://%s/auth/realms/%s/protocol/openid-connect/logout?redirect_uri=http://%s/", host, realm, host),
          redirect_after_logout_with_id_token_hint = false,
          session_contents = {id_token=true},
          scope = "openid email profile"
        }
        -- call introspect for OAuth 2.0 Bearer Access Token validation
        local res, err = require("resty.openidc").authenticate(opts)
        if err then
          ngx.status = 403
          ngx.say(err)
          ngx.exit(ngx.HTTP_FORBIDDEN)
        end
      ';

      try_files $uri $uri/ /index.html;
    }

    location /api {
      access_by_lua '
        local host = ngx.req.get_headers()["Host"]
        local realm = "acme"
        
        local opts = {
          redirect_uri = string.format("http://%s/login", host),
          accept_none_alg = true,
          discovery = string.format("http://%s/auth/realms/%s/.well-known/openid-configuration", host, realm),
          client_id = "acme",
          client_secret = "3a6e227c-dd20-4ce5-8be7-abe6dab831ca",
          redirect_uri_scheme = "http",
          logout_path = "/logout",
          redirect_after_logout_uri = string.format("http://%s/auth/realms/%s/protocol/openid-connect/logout?redirect_uri=http://%s/", host, realm, host),
          redirect_after_logout_with_id_token_hint = false,
          session_contents = {id_token=true},
          scope = "openid email profile"
        }

        -- check session, do not redirect to auth if not already logged in but return an error instead
        local res, err, target, session = require("resty.openidc").authenticate(opts, nil, "deny")

        if err then
          ngx.status = 403
          ngx.say(err)
          ngx.exit(ngx.HTTP_FORBIDDEN)
        end
        
        ngx.req.set_header("X-User", res.id_token.sub)
      ';

      proxy_pass http://api;
      proxy_set_header Host $http_host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
    
    location /auth {
      proxy_pass http://keycloak;
      proxy_set_header Host $http_host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

  }
}
